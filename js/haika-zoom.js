// Generated by CoffeeScript 1.8.0
$.extend(haika, {
  zoomFull: function() {
    var bottom, bound, canvasHeight, canvasWidth, height, heightScale, left, object, right, scale, top, width, widthScale, _i, _len, _ref;
    if (this.objects.length < 0) {
      return;
    }
    this.setScale(1);
    this.render();
    _ref = this.canvas.getObjects();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      log(object.top);
      bound = object.getBoundingRect();
      if (typeof left === "undefined" || left === null) {
        left = bound.left;
        right = bound.left + bound.width;
        top = bound.top;
        bottom = bound.top + bound.height;
        continue;
      }
      left = Math.min(bound.left, left);
      right = Math.max(bound.left + bound.width, right);
      top = Math.min(bound.top, top);
      bottom = Math.max(bound.top + bound.height, bottom);
    }
    canvasWidth = this.canvas.getWidth();
    canvasHeight = this.canvas.getHeight();
    width = right - left;
    height = bottom - top;
    log(width);
    log(height);
    widthScale = width / canvasWidth;
    heightScale = height / canvasHeight;
    log(widthScale);
    log(heightScale);
    this.centerX = this.centerX - (left + width / 2 - canvasWidth / 2);
    this.centerY = this.centerY - (top + height / 2 - canvasHeight / 2);
    scale = widthScale >= heightScale ? widthScale : heightScale;
    log(scale);
    return this.setScale(scale);
  },
  zoomIn: function() {
    var newScale, prevScale;
    prevScale = this.scaleFactor;
    newScale = prevScale + Math.pow(prevScale + 1, 2) / 20;
    if (newScale < 1 && prevScale > 1) {
      newScale = 1;
    }
    return this.setScale(newScale);
  },
  zoomOut: function() {
    var newScale, prevScale;
    prevScale = this.scaleFactor;
    newScale = prevScale - Math.pow(prevScale + 1, 2) / 20;
    if (prevScale > 1 && newScale < 1) {
      newScale = 1;
    }
    return this.setScale(newScale);
  }
});

//# sourceMappingURL=haika-zoom.js.map
