// Generated by CoffeeScript 1.8.0
$.extend(haika, {
  _api_load_endpoint: '/api/floor/load',
  _api_save_endpoint: '/api/floor/save',
  _dataId: null,
  _revision: null,
  _collision: null,
  _geojson: {},
  _nowSaving: false,
  _autoSaveTimerId: null,
  close: function() {
    this._dataId = null;
    this._revision = null;
    this._collision = null;
    this._geojson = {};
    this.objects.length = 0;
    return this.backgroundImage = null;
  },
  openFromApi: function(id, revision, success, error) {
    if (revision == null) {
      revision = null;
    }
    if (success == null) {
      success = null;
    }
    if (error == null) {
      error = null;
    }
    if (this._dataId) {
      this.close();
    }
    if (this._nowSaving) {
      error && error('保存処理中のため読み込めませんでした');
    }
    return $.ajax({
      url: this._api_load_endpoint,
      type: 'POST',
      cache: false,
      dataType: 'json',
      data: {
        id: id,
        revision: revision
      },
      error: (function(_this) {
        return function() {
          return error && error('データが読み込めませんでした');
        };
      })(this),
      success: (function(_this) {
        return function(json) {
          if (json.locked) {
            return error && error('データはロックされています');
          }
          _this._dataId = json.id;
          _this._revision = json.revision;
          _this._collision = json.collision;
          _this._geojson = json.data;
          _this.loadFromGeoJson();
          $(_this).trigger('haika:load');
          return success && success();
        };
      })(this)
    });
  },
  loadFromGeoJson: function(geojson) {
    var key, klass, object, schema, shape, _i, _len, _ref;
    if (geojson == null) {
      geojson = null;
    }
    if (!geojson) {
      geojson = this._geojson;
    }
    this.options.backgroundScaleFactor = geojson.haika.backgroundScaleFactor ? geojson.haika.backgroundScaleFactor : 1;
    this.options.backgroundOpacity = geojson.haika.backgroundOpacity;
    if (geojson.haika.backgroundUrl != null) {
      this.options.backgroundUrl = geojson.haika.backgroundUrl;
    } else {
      this.options.backgroundUrl = '';
    }
    if (geojson.haika.xyAngle != null) {
      this.options.xyAngle = geojson.haika.xyAngle;
    }
    if (geojson.haika.xyScaleFactor != null) {
      this.options.xyScaleFactor = geojson.haika.xyScaleFactor;
    }
    if ((geojson.haika.xyLongitude != null) && (geojson.haika.xyLatitude != null)) {
      this.options.xyLongitude = parseFloat(geojson.haika.xyLongitude);
      this.options.xyLatitude = parseFloat(geojson.haika.xyLatitude);
    }
    if (geojson && geojson.features.length > 0) {
      _ref = geojson.features;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if (object.properties.id > this.lastId) {
          this.lastId = object.properties.id;
        }
        klass = this.getClass(object.properties.type);
        shape = new klass({
          id: object.properties.id,
          top: this.transformTopY_cm2px(object.properties.top_cm),
          left: this.transformLeftX_cm2px(object.properties.left_cm),
          top_cm: object.properties.top_cm,
          left_cm: object.properties.left_cm,
          fill: object.properties.fill,
          stroke: object.properties.stroke,
          angle: object.properties.angle
        });
        schema = shape.constructor.prototype.getJsonSchema();
        for (key in schema.properties) {
          shape[key] = object.properties[key];
        }
        this.add(shape);
      }
    }
    return this.render();
  },
  save: function(success, error) {
    var data;
    if (success == null) {
      success = null;
    }
    if (error == null) {
      error = null;
    }
    this.prepareData();
    log('save');
    if (this._autoSaveTimerId) {
      clearTimeout(this._autoSaveTimerId);
      this._autoSaveTimerId = null;
    }
    if (this._nowSaving) {
      setTimeout((function(_this) {
        return function() {
          return _this.save(success, error);
        };
      })(this), 500);
      return;
    }
    this._nowSaving = true;
    data = {
      id: this._dataId,
      revision: this._revision,
      collision: this._collision,
      data: JSON.stringify(this.toGeoJSON())
    };
    return $.ajax({
      url: this._api_save_endpoint,
      type: 'POST',
      data: data,
      dataType: 'json',
      success: (function(_this) {
        return function(json) {
          _this._nowSaving = false;
          if (!json.success) {
            error && error(json.message);
            alert(json.message);
            location.reload();
            return;
          }
          _this._revision = json.revision;
          _this._collision = json.collision;
          success && success();
          return $(_this).trigger('haika:save');
        };
      })(this),
      error: (function(_this) {
        return function() {
          _this._nowSaving = false;
          return error && error('データが保存できませんでした');
        };
      })(this)
    });
  },
  saveDelay: function(delay, success, error) {
    if (delay == null) {
      delay = 2000;
    }
    if (success == null) {
      success = null;
    }
    if (error == null) {
      error = null;
    }
    log('save-delay');
    this.prepareData();
    if (this._autoSaveTimerId) {
      clearTimeout(this._autoSaveTimerId);
      this._autoSaveTimerId = null;
    }
    return this._autoSaveTimerId = setTimeout((function(_this) {
      return function() {
        _this._autoSaveTimerId = null;
        return _this.save(success, error);
      };
    })(this), delay);
  }
});

//# sourceMappingURL=haika-io-v2.js.map
