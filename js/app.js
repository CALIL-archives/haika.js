// Generated by CoffeeScript 1.7.1
var app, log;

log = function(obj) {
  try {
    return console.log(obj);
  } catch (_error) {}
};

app = {
  id: null,
  state: 'shelf',
  width: 800,
  height: 800,
  centerX: 0,
  centerY: 0,
  scale: 1,
  objects: [],
  canvas: false,
  is_moving: false,
  is_scaling: false,
  is_rotating: false,
  bgimg: null,
  bgimg_width: null,
  bgimg_height: null,
  options: {},
  init: function(options) {
    var canvas, default_options;
    default_options = {
      canvas: 'canvas',
      canvas_width: 800,
      canvas_height: 600,
      max_width: 10000,
      max_height: 10000,
      scale: 1,
      bgurl: null,
      bgopacity: 1,
      bgscale: 1
    };
    this.options = $.extend(default_options, options);
    canvas = new fabric.Canvas(this.options.canvas, {
      rotationCursor: 'url("img/rotate.cur") 10 10, crosshair'
    });
    canvas.setWidth(this.options.canvas_width);
    $('#canvas_width').val(this.options.canvas_width);
    canvas.setHeight(this.options.canvas_height);
    $('#canvas_height').val(this.options.canvas_height);
    canvas._getActionFromCorner = function(target, corner) {
      var action;
      action = 'drag';
      if (corner) {
        if (corner === 'ml' || corner === 'mr' || corner === 'tr' || corner === 'tl' || corner === 'bl' || corner === 'br') {
          action = 'scaleX';
        } else if (corner === 'mt' || corner === 'mb') {
          action = 'scaleY';
        } else if (corner === 'mtr') {
          action = 'rotate';
        }
      }
      return action;
    };
    canvas._renderBackground = function(ctx) {
      if (this.backgroundColor) {
        ctx.fillStyle = (this.backgroundColor.toLive ? this.backgroundColor.toLive(ctx) : this.backgroundColor);
        ctx.fillRect(this.backgroundColor.offsetX || 0, this.backgroundColor.offsetY || 0, this.width, this.height);
      }
      ctx.mozImageSmoothingEnabled = false;
      if (this.backgroundImage) {
        this.backgroundImage.render(ctx);
      }
      ctx.mozImageSmoothingEnabled = true;
      return fabric.drawGridLines(ctx);
    };
    initAligningGuidelines(canvas);
    this.canvas = canvas;
    this.scale = options.scale;
    if (this.options.bgurl) {
      fabric.Image.fromURL(this.options.bgurl, (function(_this) {
        return function(img) {
          _this.bgimg = img;
          _this.bgimg_width = img.width;
          _this.bgimg_height = img.height;
          return _this.render();
        };
      })(this));
    }
    this.render();
    setTimeout((function(_this) {
      return function() {
        _this.load();
        if (options.callback != null) {
          return options.callback();
        }
      };
    })(this), 500);
    this.canvas.on('object:selected', (function(_this) {
      return function(e) {
        var object;
        object = e.target;
        if (object._objects != null) {
          object.lockScalingX = true;
          object.lockScalingY = true;
        }
        _this.save();
        return _this.set_propety_panel();
      };
    })(this));
    this.canvas.on('before:selection:cleared', (function(_this) {
      return function(e) {
        var object;
        object = e.target;
        _this.canvas.deactivateAll().renderAll();
        _this.save();
        return _this.set_propety_panel();
      };
    })(this));
    this.canvas.on('object:scaling', (function(_this) {
      return function(e) {
        var object;
        object = e.target;
        if (object.__resizeShelf != null) {
          return object.__resizeShelf();
        }
      };
    })(this));
    this.canvas.on('object:modified', (function(_this) {
      return function(e) {
        var object;
        object = e.target;
        if (object.__modifiedShelf != null) {
          object.__modifiedShelf();
        }
        return _this.set_propety_panel();
      };
    })(this));
    return $(window).on('beforeunload', (function(_this) {
      return function(event) {
        _this.render();
        _this.save();
      };
    })(this));
  },
  last_id: 0,
  get_id: function() {
    if (this.objects.length === 0) {
      return 0;
    }
    this.last_id += 1;
    return this.last_id;
  },
  findbyid: function(id) {
    var count;
    count = null;
    $(this.objects).each(function(i, obj) {
      if (obj.id === id) {
        return count = i;
      }
    });
    return count;
  },
  add: function(object) {
    var o, prop, props, _i, _len;
    if (object.id === '') {
      object.id = this.get_id();
    }
    o = {
      id: object.id
    };
    props = ['eachWidth', 'eachHeight', 'type', 'width', 'height', 'scaleX', 'scaleY', 'left', 'top', 'angle', 'fill', 'stroke'];
    if (object.type.match(/shelf$/)) {
      props.push('count');
      props.push('side');
    }
    for (_i = 0, _len = props.length; _i < _len; _i++) {
      prop = props[_i];
      if (prop === 'top') {
        o.top_cm = this.transformTopY_px2cm(object.top);
        continue;
      }
      if (prop === 'left') {
        o.left_cm = this.transformLeftX_px2cm(object.left);
        continue;
      }
      o[prop] = object[prop];
    }
    this.objects.push(o);
    return o.id;
  },
  set_state: function(object) {
    var state;
    if (object.type.match(/shelf$/)) {
      state = 'shelf';
    } else {
      state = 'beacon';
    }
    this.state = state;
    return $('.nav a.' + this.state).tab('show');
  },
  bind: function(func, do_active) {
    var group, new_id, new_ids, object, _i, _len, _ref;
    if (do_active == null) {
      do_active = true;
    }
    object = this.canvas.getActiveObject();
    if (object) {
      new_id = func(object);
      if (new_id && do_active) {
        $(this.canvas.getObjects()).each((function(_this) {
          return function(i, obj) {
            if (obj.id === new_id) {
              return _this.canvas.setActiveObject(obj);
            }
          };
        })(this));
      }
    }
    group = this.canvas.getActiveGroup();
    if (group) {
      new_ids = [];
      _ref = group.getObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        new_id = func(object);
        new_ids.push(new_id);
      }
      if (do_active) {
        return this.active_group(new_ids);
      } else {
        return this.render();
      }
    }
  },
  active_group: function(new_ids) {
    var group, new_id, new_objects, object, _i, _j, _len, _len1, _ref;
    new_objects = [];
    _ref = this.canvas.getObjects();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      for (_j = 0, _len1 = new_ids.length; _j < _len1; _j++) {
        new_id = new_ids[_j];
        if (object.id === new_id) {
          new_objects.push(object);
        }
      }
    }
    new_objects = new_objects.map(function(o) {
      return o.set("active", true);
    });
    group = new fabric.Group(new_objects, {
      originX: "center",
      originY: "center"
    });
    this.canvas._activeObject = null;
    return this.canvas.setActiveGroup(group.setCoords()).renderAll();
  },
  remove: function() {
    return this.bind((function(_this) {
      return function(object) {
        return _this.__remove(object);
      };
    })(this), false);
  },
  __remove: function(object) {
    var count;
    this.canvas.remove(object);
    count = this.findbyid(object.id);
    this.objects.splice(count, 1);
    return object;
  },
  bringToFront: function() {
    return this.bind((function(_this) {
      return function(object) {
        var count, obj;
        count = _this.findbyid(object.id);
        object.bringToFront();
        obj = _this.objects[count];
        _this.objects.splice(count, 1);
        _this.objects.push(obj);
        return obj.id;
      };
    })(this));
  },
  add_active: function(object, top, left) {
    var new_id;
    this.save();
    object.id = this.get_id();
    object.top = top;
    object.left = left;
    new_id = this.add(object);
    this.render();
    return new_id;
  },
  duplicate: function() {
    return this.bind((function(_this) {
      return function(object) {
        var new_id, o;
        _this.canvas.discardActiveGroup();
        o = fabric.util.object.clone(object);
        new_id = _this.add_active(o, o.top + 10, o.left + 10);
        return new_id;
      };
    })(this));
  },
  clipboard: [],
  clipboard_count: 1,
  copy: function() {
    this.clipboard = [];
    this.clipboard_count = 1;
    return this.bind((function(_this) {
      return function(object) {
        return _this.clipboard.push(object);
      };
    })(this), false);
  },
  paste: function() {
    var new_id, new_ids, object, _i, _len, _ref;
    if (this.clipboard.length <= 0) {
      return;
    }
    if (this.clipboard.length === 1) {
      new_id = this.__paste(this.clipboard[0]);
      $(this.canvas.getObjects()).each((function(_this) {
        return function(i, obj) {
          if (obj.id === new_id) {
            return _this.canvas.setActiveObject(obj);
          }
        };
      })(this));
    } else {
      new_ids = [];
      _ref = this.clipboard;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        new_id = this.__paste(object);
        new_ids.push(new_id);
      }
      this.active_group(new_ids);
    }
    return this.clipboard_count += 1;
  },
  __paste: function(object) {
    var left, new_id, o, top;
    o = fabric.util.object.clone(object);
    top = o.top + this.clipboard_count * o.height / 2;
    left = o.left + this.clipboard_count * o.width / 10;
    new_id = this.add_active(o, top, left);
    return new_id;
  },
  select_all: function() {
    var group, objects;
    this.canvas.discardActiveGroup();
    objects = this.canvas.getObjects().map(function(o) {
      return o.set("active", true);
    });
    group = new fabric.Group(objects, {
      originX: "center",
      originY: "center"
    });
    this.canvas._activeObject = null;
    return this.canvas.setActiveGroup(group.setCoords()).renderAll();
  },
  unselect_all: function() {
    return this.canvas.deactivateAll().renderAll();
  },
  transformLeftX_cm2px: function(cm) {
    return this.canvas.getWidth() / 2 + (this.centerX - cm) * this.scale;
  },
  transformTopY_cm2px: function(cm) {
    return this.canvas.getHeight() / 2 + (this.centerY - cm) * this.scale;
  },
  transformLeftX_px2cm: function(px) {
    return this.centerX - (px - this.canvas.getWidth() / 2) / this.scale;
  },
  transformTopY_px2cm: function(px) {
    return this.centerY - (px - this.canvas.getHeight() / 2) / this.scale;
  },
  unselect: function() {
    var object;
    object = app.canvas.getActiveObject();
    if (!object) {
      object = app.canvas.getActiveGroup();
    }
    if (object) {
      this.canvas.fire('before:selection:cleared', {
        target: object
      });
      return this.canvas.fire('selection:cleared', {
        target: object
      });
    }
  },
  get_class: function(classname) {
    if (classname === 'shelf') {
      return fabric.Shelf;
    } else if (classname === 'curved_shelf') {
      return fabric.curvedShelf;
    } else if (classname === 'beacon') {
      return fabric.Beacon;
    } else {
      return fabric.Shelf;
    }
  },
  render: function() {
    var beacons, o, shelfs, _i, _j, _k, _len, _len1, _len2, _ref;
    this.canvas.renderOnAddRemove = false;
    this.unselect();
    this.canvas._objects.length = 0;
    beacons = [];
    shelfs = [];
    _ref = this.objects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      if (o.type === 'beacon') {
        beacons.push(o);
      }
      if (o.type.match(/shelf$/)) {
        shelfs.push(o);
      }
    }
    for (_j = 0, _len1 = shelfs.length; _j < _len1; _j++) {
      o = shelfs[_j];
      this.render_object(o);
    }
    for (_k = 0, _len2 = beacons.length; _k < _len2; _k++) {
      o = beacons[_k];
      this.render_object(o);
    }
    this.render_bg();
    this.canvas.renderAll();
    this.canvas.renderOnAddRemove = true;
    return this.debug();
  },
  render_object: function(o) {
    var klass, object;
    klass = this.get_class(o.type);
    object = new klass();
    if (o.type.match(/shelf$/)) {
      object.side = o.side;
      object.count = o.count;
      object.eachWidth = o.eachWidth;
      object.eachHeight = o.eachHeight;
    }
    object.selectable = o.type.match(this.state);
    if (!o.type.match(this.state)) {
      object.opacity = 0.5;
    }
    object.id = o.id;
    object.scaleX = object.scaleY = 1;
    object.width = object.__width();
    object.height = object.__height();
    object.top = this.transformTopY_cm2px(o.top_cm);
    object.left = this.transformLeftX_cm2px(o.left_cm);
    object.top_cm = o.top_cm;
    object.left_cm = o.left_cm;
    object.angle = o.angle;
    object.originX = 'center';
    object.originY = 'center';
    if (o.type === 'beacon') {
      object.fill = "#000000";
      object.hasControls = false;
      object.padding = 10;
      object.borderColor = "#0000ee";
    } else {
      object.borderColor = "#000000";
      object.fill = "#CFE2F3";
      object.padding = 0;
    }
    object.stroke = "#000000";
    object.transparentCorners = false;
    object.cornerColor = "#488BD4";
    object.borderOpacityWhenMoving = 0.8;
    object.cornerSize = 10;
    return this.canvas.add(object);
  },
  render_bg: function() {
    if (this.bgimg) {
      this.bgimg.left = Math.floor(this.canvas.getWidth() / 2 + (-this.bgimg_width * this.options.bgscale / 2 + this.centerX) * this.scale);
      this.bgimg.top = Math.floor(this.canvas.getHeight() / 2 + (-this.bgimg_height * this.options.bgscale / 2 + this.centerY) * this.scale);
      this.bgimg.width = Math.floor(this.bgimg_width * this.options.bgscale * this.scale);
      this.bgimg.height = Math.floor(this.bgimg_height * this.options.bgscale * this.scale);
      this.bgimg.opacity = this.options.bgopacity;
      return this.canvas.setBackgroundImage(this.bgimg);
    }
  },
  debug: function() {
    $('#canvas_width').val(this.canvas.getWidth());
    $('#canvas_height').val(this.canvas.getHeight());
    $('#canvas_centerX').val(this.centerX);
    $('#canvas_centerY').val(this.centerY);
    return $('#canvas_bgscale').val(this.options.bgscale);
  },
  get_move: function(event) {
    if (event.shiftKey) {
      return 10;
    } else {
      return 1;
    }
  },
  up: function(event) {
    var object;
    object = this.canvas.getActiveObject();
    if (object) {
      object.top = object.top - this.get_move(event);
      return this.canvas.renderAll();
    }
  },
  down: function(event) {
    var object;
    object = this.canvas.getActiveObject();
    if (object) {
      object.top = object.top + this.get_move(event);
      return this.canvas.renderAll();
    }
  },
  left: function(event) {
    var object;
    object = this.canvas.getActiveObject();
    if (object) {
      object.left = object.left - this.get_move(event);
      return this.canvas.renderAll();
    }
  },
  right: function(event) {
    var object;
    object = this.canvas.getActiveObject();
    if (object) {
      object.left = object.left + this.get_move(event);
      return this.canvas.renderAll();
    }
  },
  zoomIn: function() {
    var prev_scale;
    this.unselect();
    prev_scale = this.scale;
    this.scale = this.scale + Math.pow(this.scale + 1, 2) / 20;
    if (this.scale >= 4) {
      this.scale = 4;
    }
    if (prev_scale < 1 && this.scale > 1) {
      this.scale = 1;
    }
    this.scale = (this.scale * 100).toFixed(0) / 100;
    this.render();
    return $('.zoom').html((this.scale * 100).toFixed(0) + '%');
  },
  zoomOut: function() {
    var prev_scale;
    this.unselect();
    prev_scale = this.scale;
    this.scale = this.scale - Math.pow(this.scale + 1, 2) / 20;
    if (this.scale <= 0.05) {
      this.scale = 0.05;
    }
    if (prev_scale > 1 && this.scale < 1) {
      this.scale = 1;
    }
    this.scale = (this.scale * 100).toFixed(0) / 100;
    this.render();
    return $('.zoom').html((this.scale * 100).toFixed(0) + '%');
  },
  zoomReset: function() {
    this.unselect();
    this.scale = 1;
    this.render();
    return $('.zoom').html('100%');
  },
  is_local: function() {
    return location.protocol === 'file:' || location.port !== '';
  },
  load: function() {
    var data;
    if (this.is_local()) {
      data = {
        canvas: JSON.parse(localStorage.getItem('canvas')),
        geojson: JSON.parse(localStorage.getItem('geojson'))
      };
      log(data);
      this.load_render(data);
      return;
    }
    if (location.hash !== '') {
      this.id = location.hash.split('#')[1];
      return this.load_server();
    } else {
      return this.get_haika_id();
    }
  },
  load_render: function(data) {
    var canvas, geojson, klass, object, shape, _i, _len, _ref;
    log(data);
    canvas = data.canvas;
    geojson = data.geojson;
    if (canvas) {
      this.state = canvas.state;
      $('.nav a.' + this.state).tab('show');
      this.scale = canvas.scale;
      $('.zoom').html((this.scale * 100).toFixed(0) + '%');
      this.centerX = canvas.centerX;
      this.centerY = canvas.centerY;
    }
    if (geojson && geojson.features.length > 0) {
      _ref = geojson.features;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if (object.properties.id > this.last_id) {
          this.last_id = object.properties.id;
        }
        klass = this.get_class(object.properties.type);
        shape = new klass({
          eachWidth: object.properties.eachWidth,
          eachHeight: object.properties.eachHeight,
          id: object.properties.id,
          count: object.properties.count,
          side: object.properties.side,
          top: this.transformTopY_cm2px(object.properties.top_cm),
          left: this.transformLeftX_cm2px(object.properties.left_cm),
          top_cm: object.properties.top_cm,
          left_cm: object.properties.left_cm,
          fill: "#CFE2F3",
          stroke: "#000000",
          angle: object.properties.angle
        });
        this.add(shape);
      }
    }
    return this.render();
  },
  get_haika_id: function() {
    var url;
    url = '/haika_store/index.php';
    return $.ajax({
      url: url,
      type: "GET",
      dataType: "json",
      error: function() {},
      success: (function(_this) {
        return function(data) {
          location.hash = data.id;
          return _this.id = data.id;
        };
      })(this)
    });
  },
  load_server: function() {
    var url;
    url = "/haika_store/data/" + this.id + ".json";
    return $.ajax({
      url: url,
      type: "GET",
      dataType: "json",
      error: function() {},
      success: (function(_this) {
        return function(data) {
          return _this.load_render(data);
        };
      })(this)
    });
  },
  get_canvas_data: function() {
    return {
      state: this.state,
      scale: this.scale,
      centerX: this.centerX,
      centerY: this.centerY
    };
  },
  save_local: function() {
    var canvas;
    canvas = this.get_canvas_data();
    localStorage.setItem('canvas', JSON.stringify(canvas));
    return localStorage.setItem('geojson', JSON.stringify(this.toGeoJSON(), null, 4));
  },
  save_server: function() {
    var data, param, url;
    param = {
      canvas: this.get_canvas_data(),
      geojson: this.toGeoJSON()
    };
    param = JSON.stringify(param);
    data = {
      id: this.id,
      data: param
    };
    log(data);
    url = '/haika_store/index.php';
    return $.ajax({
      url: url,
      type: "POST",
      data: data,
      dataType: "json",
      error: function() {},
      success: data > log(data)
    });
  },
  save: function() {
    var object, _i, _len, _ref;
    _ref = this.canvas.getObjects();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      this.save_prop(object);
    }
    this.save_local();
    if (!this.is_local()) {
      return this.save_server();
    }
  },
  save_prop: function(object, group) {
    var count, key, schema, _results;
    if (group == null) {
      group = false;
    }
    count = this.findbyid(object.id);
    this.objects[count].id = object.id;
    this.objects[count].type = object.type;
    this.objects[count].top_cm = this.transformTopY_px2cm(object.top);
    object.top_cm = this.objects[count].top_cm;
    this.objects[count].left_cm = this.transformLeftX_px2cm(object.left);
    object.left_cm = this.objects[count].left_cm;
    this.objects[count].scaleX = object.scaleX / this.scale;
    this.objects[count].scaleY = object.scaleY / this.scale;
    this.objects[count].angle = object.angle;
    if (object.type.match(/shelf$/)) {
      schema = object.constructor.prototype.getJsonSchema();
      _results = [];
      for (key in schema.properties) {
        _results.push(this.objects[count][key] = object[key]);
      }
      return _results;
    }
  },
  mapCenter: null,
  mapAngle: 0,
  setMapCenter: function(latlon) {
    return this.mapCenter = proj4("EPSG:4326", "EPSG:3857", latlon);
  },
  toGeoJSON: function() {
    var data, features, geojson, object, _i, _len, _ref;
    features = [];
    _ref = this.canvas.getObjects();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      geojson = object.toGeoJSON();
      features.push(geojson);
    }
    data = {
      "type": "FeatureCollection",
      "features": features
    };
    return data;
  },
  getGeoJSON: function() {
    var coordinate, coordinates, features, geojson, geometry, new_coordinate, object, x, y, _i, _j, _len, _len1, _ref, _ref1;
    this.unselect();
    this.render();
    geojson = this.toGeoJSON();
    features = [];
    _ref = geojson.features;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      if (this.mapCenter) {
        coordinates = [];
        _ref1 = object.geometry.coordinates[0];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          geometry = _ref1[_j];
          x = geometry[0];
          y = geometry[1];
          new_coordinate = fabric.util.rotatePoint(new fabric.Point(x, y), new fabric.Point(0, 0), fabric.util.degreesToRadians(-this.mapAngle));
          coordinate = [this.mapCenter[0] + new_coordinate.x, this.mapCenter[1] + new_coordinate.y];
          coordinates.push(coordinate);
          log(coordinate);
        }
        object.geometry.coordinates = [coordinates];
      }
      features.push(object);
    }
    geojson.features = features;
    localStorage.setItem('geojson', JSON.stringify(geojson));
    log(geojson);
    $(window).off('beforeunload');
    return location.href = 'map2.html';
  },
  getSVG: function() {
    var a, blob, canvas, svg, tmp_canvas, tmp_scale;
    this.unselect();
    canvas = document.createElement('canvas');
    canvas = new fabric.Canvas(canvas);
    canvas.setWidth(this.options.max_width);
    canvas.setHeight(this.options.max_height);
    tmp_canvas = this.canvas;
    tmp_scale = this.scale;
    this.canvas = canvas;
    this.scale = 1;
    this.render();
    svg = this.canvas.toSVG();
    this.canvas = tmp_canvas;
    this.scale = tmp_scale;
    a = document.createElement('a');
    a.download = 'sample.svg';
    a.type = 'image/svg+xml';
    blob = new Blob([svg], {
      "type": "image/svg+xml"
    });
    a.href = (window.URL || webkitURL).createObjectURL(blob);
    return a.click();
  },
  set_propety_panel: function(object) {
    var group, key, objects, properties, value;
    $('.canvas_panel, .object_panel, .group_panel').hide();
    object = this.canvas.getActiveObject();
    if (object && (object.getJsonSchema != null)) {
      editor.schema = object.getJsonSchema();
      properties = {};
      for (key in editor.schema.properties) {
        if (editor.schema.properties[key].type === 'integer') {
          value = object[key].toFixed(0);
        } else {
          value = object[key];
        }
        properties[key] = value;
      }
      editor.setValue(properties);
      if (object.toGeoJSON != null) {
        $('#geojson').val(JSON.stringify(object.toGeoJSON(), null, 4));
      }
      $('.object_panel').show();
      $('#object_id').html(object.id);
      return;
    }
    group = this.canvas.getActiveGroup();
    if (group) {
      objects = group._objects;
      $('#group_count').html(objects.length);
      $('.group_panel').show();
    } else {
      return $('.canvas_panel').show();
    }
  }
};

/*
//@ sourceMappingURL=app.map
*/
