// Generated by CoffeeScript 1.7.1
var EPSG3857_geojson, center, coordinate, coordinates, data, features, geojson, geometry, image, log, map, map_center, object, styleFunction, styles, vectorLayer, vectorSource, x, y, _i, _j, _len, _len1, _ref, _ref1;

log = function(obj) {
  try {
    return console.log(obj);
  } catch (_error) {}
};

image = new ol.style.Circle({
  radius: 5,
  fill: null,
  stroke: new ol.style.Stroke({
    color: "blue",
    width: 1
  })
});

styles = {
  Point: [
    new ol.style.Style({
      image: image
    })
  ],
  LineString: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "green",
        width: 1
      })
    })
  ],
  MultiLineString: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "green",
        width: 1
      })
    })
  ],
  MultiPoint: [
    new ol.style.Style({
      image: image
    })
  ],
  MultiPolygon: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "yellow",
        width: 1
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 255, 0, 0.1)"
      })
    })
  ],
  Polygon: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "red",
        width: 3
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.1)"
      })
    })
  ],
  GeometryCollection: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "magenta",
        width: 2
      }),
      fill: new ol.style.Fill({
        color: "magenta"
      }),
      image: new ol.style.Circle({
        radius: 10,
        fill: null,
        stroke: new ol.style.Stroke({
          color: "magenta"
        })
      })
    })
  ],
  Circle: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "red",
        width: 2
      }),
      fill: new ol.style.Fill({
        color: "rgba(255,0,0,0.2)"
      })
    })
  ]
};

styleFunction = function(feature, resolution) {
  return styles[feature.getGeometry().getType()];
};

geojson = JSON.parse(localStorage.getItem("geojson"));

console.log(geojson);

map_center = {
  lat: 15246739.471236346,
  lon: 4184975.9183342634
};

vectorSource = new ol.source.GeoJSON({
  object: geojson
});

features = vectorSource.getFeatures();

console.log(features);

vectorLayer = new ol.layer.Vector({
  source: vectorSource,
  style: styleFunction
});

center = ol.proj.transform([136.963791, 35.155080], "EPSG:4326", "EPSG:3857");

console.log(center);

center = ol.proj.transform([136.963791, 35.155049], "EPSG:4326", "EPSG:3857");

console.log(center);

map = new ol.Map({
  layers: [
    new ol.layer.Tile({
      source: new ol.source.OSM()
    }), vectorLayer
  ],
  target: "map",
  view: new ol.View2D({
    center: center,
    zoom: 6,
    projection: "EPSG:4326"
  })
});

features = [];

if (geojson && geojson.features.length > 0) {
  _ref = geojson.features;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    object = _ref[_i];
    log(object);
    coordinates = [];
    _ref1 = object.geometry.coordinates[0];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      geometry = _ref1[_j];
      x = geometry[0];
      y = geometry[1];
      coordinate = ol.proj.transform([x, y], "EPSG:3857", "EPSG:4326");
      coordinates.push(coordinate);
    }
    data = {
      "type": "Feature",
      "geometry": {
        "type": "Polygon",
        "coordinates": [coordinates]
      },
      "properties": object.properties
    };
    features.push(data);
  }
}

EPSG3857_geojson = {
  "type": "FeatureCollection",
  "features": features
};

$('#geojson').val(JSON.stringify(EPSG3857_geojson, null, 4));

/*
//@ sourceMappingURL=map2.map
*/
