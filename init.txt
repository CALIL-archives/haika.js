初期設計

キャンバスの大きさ

width
height

現在の座標

x
y

倍率

zoom


オブジェクト

objects

width
height
top
left
scaleX
scaleY

オブジェクトの追加
object:added

オブジェクトの削除
object:removed

オブジェクトの移動
object:moving

オブジェクトの拡大縮小
object:scaling

オブジェクトの回転
object:rotating

書き換え
after:render


obj.on({
        moving: setCoords,
        scaling: setCoords,
        rotating: setCoords
      });


# Zoom In
app.zoomIn = ->
  
  # TODO limit the max canvas zoom in
  canvasScale = canvasScale * SCALE_FACTOR
  objects = canvas.getObjects()
  for i of objects
    scaleX = objects[i].scaleX
    scaleY = objects[i].scaleY
    left = objects[i].left
    top = objects[i].top
    tempScaleX = scaleX * SCALE_FACTOR
    tempScaleY = scaleY * SCALE_FACTOR
    tempLeft = left * SCALE_FACTOR
    tempTop = top * SCALE_FACTOR
    objects[i].scaleX = tempScaleX
    objects[i].scaleY = tempScaleY
    objects[i].left = tempLeft
    objects[i].top = tempTop
    objects[i].setCoords()
  width = canvas.getWidth()
  height = canvas.getHeight()
  tempWidth = width * SCALE_FACTOR
  tempHeight = height * SCALE_FACTOR
  canvas.setWidth tempWidth
  canvas.setHeight tempHeight
  canvas.renderAll()
  return


# Zoom Out
app.zoomOut = ->
  
  # TODO limit max cavas zoom out
  canvasScale = canvasScale / SCALE_FACTOR
  objects = canvas.getObjects()
  for i of objects
    scaleX = objects[i].scaleX
    scaleY = objects[i].scaleY
    left = objects[i].left
    top = objects[i].top
    tempScaleX = scaleX * (1 / SCALE_FACTOR)
    tempScaleY = scaleY * (1 / SCALE_FACTOR)
    tempLeft = left * (1 / SCALE_FACTOR)
    tempTop = top * (1 / SCALE_FACTOR)
    objects[i].scaleX = tempScaleX
    objects[i].scaleY = tempScaleY
    objects[i].left = tempLeft
    objects[i].top = tempTop
    objects[i].setCoords()
  width = canvas.getWidth()
  height = canvas.getHeight()
  tempWidth = width * (1 / SCALE_FACTOR)
  tempHeight = height * (1 / SCALE_FACTOR)
  canvas.setWidth tempWidth
  canvas.setHeight tempHeight
  canvas.renderAll()
  return

# Reset Zoom
app.resetZoom = ->
  objects = canvas.getObjects()
  for i of objects
    scaleX = objects[i].scaleX
    scaleY = objects[i].scaleY
    left = objects[i].left
    top = objects[i].top
    tempScaleX = scaleX * (1 / canvasScale)
    tempScaleY = scaleY * (1 / canvasScale)
    tempLeft = left * (1 / canvasScale)
    tempTop = top * (1 / canvasScale)
    objects[i].scaleX = tempScaleX
    objects[i].scaleY = tempScaleY
    objects[i].left = tempLeft
    objects[i].top = tempTop
    objects[i].setCoords()
  width = canvas.getWidth()
  height = canvas.getHeight()
  tempWidth = width * (1 / canvasScale)
  tempHeight = height * (1 / canvasScale)
  canvas.setWidth tempWidth
  canvas.setHeight tempHeight
  canvas.renderAll()
  canvasScale = 1
  return

    @canvas.on('after:render', (e)=>
        log 'rendered'
        object = @canvas.getActiveObject()
        if object
          @rotating(object)
        group = @canvas.getActiveGroup()
        if group
          objects = group._objects
          log objects
          for object in objects
            @rotating(object)
    )
    
            #if @is_moving
        #  @moving(object)
        #if @is_scaling
        #  @scaling(object)
        #if @is_rotating
        #  @rotating(object)
        #@is_moving  = false
        #@is_scaling = false
        #@is_rotating= false
    @canvas.on('object:selected', (e)=>
        object = e.target
    )
    @canvas.on('object:modified', (e)=>
        object = e.target
        log 'modified'
    )
    @canvas.on('object:moving', (e)=>
        object = e.target
        log 'moving'
        @is_moving  = true
    )
    @canvas.on('object:scaling', (e)=>
        object = e.target
        log 'scaling'
        @is_scaling = true
    )
    @canvas.on('object:rotating', (e)=>
        object = e.target
        log 'rotating'
        @is_rotating= true
    )
    @canvas.on('selection:cleared', (e)=>
      log 'unselect'
      log e.target
    )
  bind : (func)->
    object = @canvas.getActiveObject()
    if object
      func(object)
    group = @canvas.getActiveGroup()
    if group
      objects = group._objects
#      @canvas.deactivateAll().renderAll()
#      for object in objects
#        func(object, group)
#      objects = group._objects.map((object) ->
#        object.set "active", true
#      )
#      group = new fabric.Group(objects,
#        originX: "center"
#        originY: "center"
#      )
      @canvas._activeObject = null
      @canvas.setActiveGroup(group.setCoords()).renderAll()
    #@render()

  moving : ()->
    log 'moving'
    @bind (object)=>
      count = @match(object)
      if count!=null
        log object.top
        @objects[count].top_cm  = @transformTopY_px2cm(object.top)
        @objects[count].left_cm = @transformLeftX_px2cm(object.left)
  scaling : ()->
    log 'scaling'
    @bind (object, group)=>
      count = @match(object)
      if count!=null
        @objects[count].scaleX = object.scaleX / @scale
        @objects[count].scaleY = object.scaleY / @scale
        @objects[count].top_cm    = @transformTopY_px2cm(object.top)
        @objects[count].left_cm   = @transformLeftX_px2cm(object.left)
  rotating : ()->
    log 'rotating'
    @bind (object)=>
      count = @match(object)
      if count!=null
        @objects[count].angle    = object.angle
        @objects[count].top_cm   = @transformTopY_px2cm(object.top)
        @objects[count].left_cm  = @transformLeftX_px2cm(object.left)
###  $(@options.canvas).on 'drag', (e)=>
    if $(".is_visible .btn-primary").find('input').val()=='edit'
      return
    console.log(this, e)
    console.log(this, e.adx)
    if e.orientation=='vertical'
      if e.dx > 1
        @toTop(500)
      if e.dx < -1
        @toBottom(500)
    else
      if e.dy > 1
        @toLeft(500)
      if e.dy < -1
        @toRight(500)
  $(".is_visible input").change ->
    if $(".is_visible .btn-primary").find('input').val()=='move'
        #app.canvas.selection = false
        #app.render()
        $('canvas').css('cursor', 'move')
    if $(".is_visible .btn-primary").find('input').val()=='edit'
        #app.canvas.selection = true
        #app.render()
        $('canvas').css('cursor', 'pointer')
    is_visible = $(this).attr("id")
    buttons = $(this).closest(".btn-group").find(".btn")
    buttons.each (i, e) ->
      $(e).removeClass("btn-primary").removeClass("btn-default")
      if is_visible==$(e).find("input").attr("id")
        $(e).addClass "btn-primary"
      else
        $(e).addClass "btn-default"
###


# test cm px
app.scale = 1
x_cm = -125
log x_cm
x_px = app.transformLeftX_cm2px(x_cm)
log x_px

x_cm = app.transformLeftX_px2cm(x_px)
log x_cm

x_px = app.transformLeftX_cm2px(x_cm)
log x_px

###
  render : ->
    log 'render'
    @unselect()
    @canvas.clear()
    for o of @objects
      scaleX  = @objects[o].scaleX
      log 'scaleX:'+scaleX
      scaleY  = @objects[o].scaleY
      left_cm = @objects[o].left_cm
      top_cm  = @objects[o].top_cm
      angle   = @objects[o].angle
      tempScaleX = scaleX * @scale
      log 'tempScaleX:'+tempScaleX
      tempScaleY = scaleY * @scale
      tempLeft   = @transformLeftX_cm2px(left_cm)
      tempTop    = @transformTopY_cm2px(top_cm)
#      if tempLeft > @width 
#        continue
#      if tempTop > @height
#        continue
      object = @objects[o]['object']
      object.scaleX = tempScaleX
      object.scaleY = tempScaleY
      object.left   = tempLeft
      object.top    = tempTop
      if angle > 0
        object.angle  = angle
      object.originX = 'center'
      object.originY = 'center'
      object.setCoords()
      @canvas.add(object)
    if @scale==1 and @drawguideline
      fabric.drawGridLines(@canvas)
    @canvas.renderAll()
    @render_bg()
    @debug()
###

  match : (object)->
    count = 0
    for o in @objects
      if o['object'].id==object.id
        return count
      count += 1
    return null

  transformLeftX_cm2px : (cm)->
    # centerX(cm) => px
    return @canvas.getWidth()/2+(@centerX-cm)*@scale
    #return @centerX * @scale + @canvas.getWidth()  / 2 - cm * @scale
  transformTopY_cm2px : (cm)->
    return @canvas.getHeight()/2+(@centerY-cm)*@scale
    #return @centerY * @scale + @canvas.getHeight() / 2 - cm * @scale
  transformLeftX_px2cm : (px)->
    # left(px) => x(cm)
    #return (px+@centerX)/@scale-@canvas.getWidth()/2
    #return @canvas.getWidth() / 2 - (px + @centerX) * @scale
    return @centerX - (px - @canvas.getWidth() / 2) / @scale
  transformTopY_px2cm : (px)->
    #return (px+@centerY)/@scale-@canvas.getHeight()/2
    #return @canvas.getHeight() / 2 - (px + @centerY) * @scale 
    return @centerY - (px - @canvas.getHeight() / 2) / @scale

#      i = 0
#      while i < @count
#        if @side is 1
#          @__renderShelf ctx, x + i * w, y, w, h
#          if app.scale > 0.5
#            @__renderSide ctx, x + i * w, y, w, h
#        if @side is 2
#          @__renderShelf ctx, x + i * w, y, w, h
#          @__renderShelf ctx, x + i * w, y + h, w, h
#        i++

